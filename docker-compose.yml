version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: hhplus-concert-mysql-1
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: hhplus
      MYSQL_USER: application
      MYSQL_PASSWORD: Application123!
      MYSQL_ROOT_PASSWORD: root
    networks:
      - concert-network
    healthcheck: # healthcheck 추가
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-db: # user-service를 위한 새로운 DB
    image: mysql:8.0
    container_name: hhplus-user-mysql-1
    ports:
      - "3307:3306" # 기존 mysql과 포트 충돌 방지
    environment:
      MYSQL_DATABASE: user_db
      MYSQL_USER: application
      MYSQL_PASSWORD: Application123!
      MYSQL_ROOT_PASSWORD: root
    networks:
      - concert-network
    healthcheck: # healthcheck 추가
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: concert-redis
    ports:
      - "6379:6379"
    networks:
      - concert-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    platform: linux/amd64   # ✅ 추가
    container_name: redis-commander
    ports:
      - "8079:8081"
    environment:
      - REDIS_HOSTS=local:concert-redis:6379
    depends_on:
      - redis
    networks:
      - concert-network

  discovery-service:
    build:
      context: .
      dockerfile: discovery-service/Dockerfile
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - concert-network

  config-service:
    build:
      context: .
      dockerfile: config-service/Dockerfile
    container_name: config-service
    ports:
      - "8888:8888"
    volumes:
      - ./config-repo:/config-repo
    environment:
      SPRING_APPLICATION_NAME: config-service
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://discovery-service:8761/eureka/
    depends_on:
      - discovery-service
    networks:
      - concert-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - concert-network

  # ⭐️ 3개의 브로커로 구성된 클러스터
  broker1:
    image: confluentinc/cp-kafka:7.6.0
    hostname: broker1
    container_name: broker1
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://broker1:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker1:29092,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - concert-network

  broker2:
    image: confluentinc/cp-kafka:7.6.0
    hostname: broker2
    container_name: broker2
    ports:
      - "9093:9093"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://broker2:29093,EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker2:29093,EXTERNAL://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - concert-network

  broker3:
    image: confluentinc/cp-kafka:7.6.0
    hostname: broker3
    container_name: broker3
    ports:
      - "9094:9094"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://broker3:29094,EXTERNAL://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker3:29094,EXTERNAL://localhost:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - concert-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8078:8080"  # 웹 UI 접속 포트
    environment:
      KAFKA_CLUSTERS_0_NAME: hhplus-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker1:29092,broker2:29093,broker3:29094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - broker1
      - broker2
      - broker3
      - zookeeper
    networks:
      - concert-network

  # 기존 server 애플리케이션
  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hhplus-concert-server
    ports:
      - "8082:8082"
    environment:
      SPRING_APPLICATION_NAME: main-server
    depends_on:
      mysql:
        condition: service_healthy # mysql이 healthy 상태가 될 때까지 기다림
      redis:
        condition: service_started
      broker1:
        condition: service_started
      broker2:
        condition: service_started
      broker3:
        condition: service_started
      discovery-service:
        condition: service_started
      config-service:
        condition: service_started
    networks:
      - concert-network

  gateway-service:
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
    container_name: gateway-service
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: gateway-service
    depends_on:
      - discovery-service
      - config-service
    networks:
      - concert-network

  user-service: # 새로 추가된 user-service 애플리케이션
    build:
      context: .
      dockerfile: user-service/Dockerfile
    container_name: hhplus-user-service
    ports:
      - "8081:8081"
    environment:
      SPRING_APPLICATION_NAME: user-service
    depends_on:
      user-db:
        condition: service_healthy
      discovery-service:
        condition: service_started
      config-service:
        condition: service_started
    networks:
      - concert-network

networks:
  concert-network:
    driver: bridge